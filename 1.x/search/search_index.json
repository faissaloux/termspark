{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#v190-2023-12-26","title":"v1.9.0 - 2023-12-26","text":""},{"location":"changelog/#added","title":"ADDED","text":"<ul> <li>print() and input() separator support (#74)</li> </ul>"},{"location":"changelog/#v181-2023-12-11","title":"v1.8.1 - 2023-12-11","text":""},{"location":"changelog/#fixed","title":"FIXED","text":"<ul> <li>Fix module not found and typing-extensions not installed (#72)</li> </ul>"},{"location":"changelog/#v180-2023-12-11","title":"v1.8.0 - 2023-12-11","text":""},{"location":"changelog/#added_1","title":"ADDED","text":"<ul> <li><code>input()</code> (#69)</li> <li><code>line()</code> (#64)</li> <li><code>print()</code> (#62)</li> </ul>"},{"location":"changelog/#fixed_1","title":"FIXED","text":"<ul> <li>Fix can't print function call (#70)</li> <li>Fix raw line (#67)</li> <li>Fix raw center position (#66)</li> </ul>"},{"location":"changelog/#v170-2023-12-07","title":"v1.7.0 - 2023-12-07","text":""},{"location":"changelog/#added_2","title":"ADDED","text":"<ul> <li>Support text styles (#60)</li> <li>Hyperlinks support (#59)</li> </ul>"},{"location":"changelog/#v160-2023-12-01","title":"v1.6.0 - 2023-12-01","text":""},{"location":"changelog/#added_3","title":"ADDED","text":"<ul> <li>Improve printers (#58)</li> <li>Ability to paint a line (#52)</li> <li>Paint separator (#51)</li> <li>py3.13 support (#50)</li> <li><code>full_width()</code> (#49)</li> <li>Add ability to set max length for content (#47)</li> <li>Trim content that exceeds terminal width (#45)</li> </ul>"},{"location":"changelog/#fixed_2","title":"FIXED","text":"<ul> <li>Fix set separator without content in line (#57)</li> <li>Fix <code>separator-line</code> combination (#56)</li> <li>Separator can accept only 1 character (#55)</li> </ul>"},{"location":"changelog/#v151-2023-11-25","title":"v1.5.1 - 2023-11-25","text":""},{"location":"changelog/#fixed_3","title":"FIXED","text":"<ul> <li>Fix center multiple content in raw mode (#44)</li> </ul>"},{"location":"changelog/#v150-2023-10-10","title":"v1.5.0 - 2023-10-10","text":""},{"location":"changelog/#added_4","title":"ADDED","text":"<ul> <li>py3.12 support (#40)</li> </ul>"},{"location":"changelog/#v141-2023-09-18","title":"v1.4.1 - 2023-09-18","text":""},{"location":"changelog/#fixed_4","title":"FIXED","text":"<ul> <li>Fix raw not working with spark methods (#37)</li> </ul>"},{"location":"changelog/#v140-2023-09-16","title":"v1.4.0 - 2023-09-16","text":""},{"location":"changelog/#added_5","title":"ADDED","text":"<ul> <li>Force width (#34)</li> <li>Raw mode (#33)</li> </ul>"},{"location":"changelog/#v130-2023-02-23","title":"v1.3.0 - 2023-02-23","text":""},{"location":"changelog/#added_6","title":"ADDED","text":"<ul> <li>Customizable end parameter (#13)</li> </ul>"},{"location":"changelog/#v121-2023-01-25","title":"v1.2.1 - 2023-01-25","text":""},{"location":"changelog/#fixed_5","title":"FIXED","text":"<ul> <li>Fix pytyped (#9)</li> </ul>"},{"location":"changelog/#v120-2023-01-25","title":"v1.2.0 - 2023-01-25","text":""},{"location":"changelog/#added_7","title":"ADDED","text":"<ul> <li>python3.11 support (#7)</li> </ul>"},{"location":"changelog/#fixed_6","title":"FIXED","text":"<ul> <li>Add py.typed file (#8)</li> </ul>"},{"location":"changelog/#v110-2022-09-03","title":"v1.1.0 - 2022-09-03","text":""},{"location":"changelog/#added_8","title":"ADDED","text":"<ul> <li>add types check 9abdb33</li> </ul>"},{"location":"changelog/#v100-2022-08-31","title":"v1.0.0 - 2022-08-31","text":""},{"location":"changelog/#fixed_7","title":"FIXED","text":"<ul> <li>raise exception when mixing printer and sparker of same position 6e39756</li> </ul>"},{"location":"changelog/#v0013-2022-08-27","title":"v0.0.13 - 2022-08-27","text":""},{"location":"changelog/#changed","title":"CHANGED","text":"<ul> <li>custom exceptions 6a0950c</li> </ul>"},{"location":"changelog/#added_9","title":"ADDED","text":"<ul> <li>can chain multiple same position sparks fa0c4db</li> </ul>"},{"location":"changelog/#v0012-2022-08-26","title":"v0.0.12 - 2022-08-26","text":""},{"location":"changelog/#added_10","title":"ADDED","text":"<ul> <li>can call termspark functions separately a74ae1c</li> </ul>"},{"location":"changelog/#v0011-2022-08-26","title":"v0.0.11 - 2022-08-26","text":""},{"location":"changelog/#fixed_8","title":"FIXED","text":"<ul> <li>raise exception when trying to pass a list to printer d805366</li> </ul>"},{"location":"changelog/#v0010-2022-08-26","title":"v0.0.10 - 2022-08-26","text":""},{"location":"changelog/#added_11","title":"ADDED","text":"<ul> <li>support different styles on same position b9aef26</li> </ul>"},{"location":"changelog/#v009-2022-08-14","title":"v0.0.9 - 2022-08-14","text":""},{"location":"changelog/#added_12","title":"ADDED","text":"<ul> <li>support grey as gray (32d32df)</li> </ul>"},{"location":"changelog/#v008-2022-08-14","title":"v0.0.8 - 2022-08-14","text":""},{"location":"changelog/#added_13","title":"ADDED","text":"<ul> <li>support more colors and highlights (c8c6900)</li> </ul>"},{"location":"changelog/#v007-2022-08-13","title":"v0.0.7 - 2022-08-13","text":""},{"location":"changelog/#fixed_9","title":"FIXED","text":"<ul> <li>fix: line() cant accept None for separator (302a162)</li> </ul>"},{"location":"changelog/#added_14","title":"ADDED","text":"<ul> <li>highlights support (aa2f18f)</li> </ul>"},{"location":"changelog/#v006-2022-08-08","title":"v0.0.6 - 2022-08-08","text":""},{"location":"changelog/#fixed_10","title":"FIXED","text":"<ul> <li>fix: colors codes length (0d40735)</li> </ul>"},{"location":"changelog/#v005-2022-08-08","title":"v0.0.5 - 2022-08-08","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>colors support (6954b08)</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>separator can contain only one character (5397277)</li> </ul>"},{"location":"changelog/#v004-2022-08-06","title":"v0.0.4 - 2022-08-06","text":""},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>fix: duplicate design codes (01cbf9d)</li> </ul>"},{"location":"changelog/#v003-2022-08-06","title":"v0.0.3 - 2022-08-06","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>support more colors (322de42)</li> <li>support highlights and more attributes (e28d07a)</li> </ul>"},{"location":"changelog/#v002-2022-08-06","title":"v0.0.2 - 2022-08-06","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Update README (89668fa)</li> </ul>"},{"location":"changelog/#v001-2022-08-06","title":"v0.0.1 - 2022-08-06","text":""},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li>init (f763c3a)</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Make sure you got the right python version.</p> <p></p> <pre><code>    pip install termspark\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022 Faissal Wahabali</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ASNY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"upgrading/","title":"Upgrading","text":""},{"location":"upgrading/#from-1x-to-2x","title":"from 1.x to 2.x","text":""},{"location":"upgrading/#renamed-colors","title":"Renamed colors","text":"<pre><code>-   bright white\n+   white\n</code></pre>"},{"location":"upgrading/#removed-colors","title":"Removed colors","text":"<pre><code>-   bright black\n-   bright red\n-   bright green\n-   bright yellow\n-   bright blue\n-   bright magenta\n-   bright cyan\n</code></pre>"},{"location":"upgrading/#changed-colors-degree","title":"Changed colors degree","text":"Color 1.x 2.x red green yellow blue magenta cyan white"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#print-but-more","title":"<code>print()</code>, but more!","text":"<p>Import Termspark's print and take advantage of all its features, colors, highlights, styles, hyperlinks and more ...</p> <p><pre><code>from termspark import print\n\nprint(\" Termspark \", \"white\", \"blue\", \"italic\")\nprint(\" [@termspark](https://github.com/faissaloux/termspark) \", \"black\", \"white\", \"italic, bold\")\n</code></pre> </p> <p>You can choose from <code>[\"left\", \"center\", \"right\"]</code> to specify where to print by passing it as position parameter: <code>print(\" Termspark \", position=\"center\")</code>.</p> <p>You can enable the Full Width using full_width parameter: <code>print(\" Termspark \", highlight=\"blue\", full_width=True)</code>.</p> <p>You can fill the empty space by a character using <code>print(separator=)</code>.</p> <p><pre><code>from termspark import print\n\nprint(\" TERMSPARK \", \"white\", \"green\", position=\"center\", separator=\"_\")\n</code></pre> </p>"},{"location":"usage/#input","title":"<code>input()</code>","text":"<p>input with colors, highlights, styles, and hyperlinks.</p> <p>With <code>input(position=)</code> you can specify position where to put your input text <code>[\"left\", \"center\", \"right\"]</code>. With <code>input(full_width=)</code> you can enable full width <code>True | False</code>.</p> <p><pre><code>from termspark import input\n\nname = input(\" What's your name? \", \"white\", \"blue\", \"italic\", \"center\", True)\n</code></pre> </p>"},{"location":"usage/#input-type","title":"Input Type","text":"<p>You can specify the input type by passing it to the <code>type=</code> parameter.</p> <p>For a calculation example, to pass the input value into a calculation you don't need to convert it to <code>int</code>  anymore, you just need to set it from <code>type</code> argument \ud83e\udd73 . <pre><code>from termspark import input\n\nbirthyear = input(\" Your year birth? \", \"white\", \"blue\", type=int)\nprint(f\"Your age is: {2023 - birthyear}\")\n</code></pre></p>"},{"location":"usage/#input-callback","title":"Input Callback","text":"<p>the <code>input()</code> supports callback too.</p> <p>If you need to pass the input value into some function before returning the result, you need to pass it into the <code>callback=</code> argument.</p> <pre><code>from termspark import input\n\ndef age_calc(birthyear, currentyear=2023):\n    return currentyear - birthyear\n\nage = input(\" Your year birth? \", \"white\", \"blue\", type=int, callback=age_calc)\nprint(f\"Your age is: {age}\")\n</code></pre> <p>You can use separator in <code>input(separator=)</code> too.</p> <p><pre><code>from termspark import input\n\nname = input(\" What's your name?\", \"white\", \"blue\", position=\"left\", separator=\".\")\n</code></pre> </p>"},{"location":"usage/#line","title":"<code>line()</code>","text":"<p>To print empty line use <code>line()</code>, you can leave it empty or fill it with a repeated character, you can specify its color too.</p> <p><pre><code>from termspark import line\n\nline(\".\", \"blue\")\nline(highlight=\"green\")\nline()\nline(\"-\")\n</code></pre> </p>"},{"location":"usage/#more-control","title":"More control","text":"<pre><code>    from termspark import TermSpark\n\n    TermSpark().print_right('RIGHT').spark()\n    TermSpark().spark_right('RIGHT').spark()\n    TermSpark().print_left('LEFT').spark()\n    TermSpark().spark_left('LEFT').spark()\n    TermSpark().print_center('CENTER').spark()\n    TermSpark().spark_center('CENTER').spark()\n    TermSpark().line('.').spark()\n\n    TermSpark().print_left('LEFT').print_right('RIGHT').set_separator('.').spark()\n    TermSpark().print_left('LEFT').print_center('CENTER').print_right('RIGHT').set_separator('.').spark()\n    TermSpark().spark_left('LEFT').spark_center('CENTER').spark_right('RIGHT').set_separator('.').spark()\n</code></pre> <p>[!NOTE] Separator can contain only one character.</p>"},{"location":"usage/#you-can-also-paint-your-content","title":"You can also paint your content","text":"<p>Supported colors: - black - red - green - yellow - blue - magenta - cyan - white - gray / grey - light red - light green - light yellow - light blue - light magenta - light cyan</p> <pre><code>    from termspark import TermSpark\n\n    TermSpark().print_right('RIGHT', 'blue').spark()\n    TermSpark().print_left('LEFT', 'light red').spark()\n    TermSpark().print_center('CENTER', 'light_green').spark()\n</code></pre> <p>Supported highlights: - black - red - green - yellow - blue - magenta - cyan - white - gray / grey - light red - light green - light yellow - light blue - light magenta - light cyan</p> <pre><code>    from termspark import TermSpark\n\n    TermSpark().print_right('RIGHT', None, 'light_magenta').spark()\n    TermSpark().print_left('LEFT', 'red', 'white').spark()\n    TermSpark().print_center('CENTER', 'white', 'light blue').spark()\n</code></pre>"},{"location":"usage/#you-can-use-different-styles-on-same-position","title":"You can use different styles on same position","text":"<p><pre><code>    from termspark import TermSpark\n\n    TermSpark().spark_left([' * ', 'gray', 'white'], [' Info ', 'white', 'blue']).spark()\n    TermSpark().spark_center([' * ', 'gray', 'white'], [' Warning ', 'white', 'yellow']).spark()\n    TermSpark().spark_right([' * ', 'gray', 'white'], [' Error ', 'white', 'red']).spark()\n</code></pre> <code>You know you can use them all together \ud83d\ude09</code></p>"},{"location":"usage/#lines-are-too-long-to-write-a-termspark-line","title":"Lines are too long to write a termspark line! \ud83d\ude11","text":"<pre><code>    from termspark import TermSpark\n\n    TermSpark().spark_left([' * ', 'gray', 'white'], [' Info ', 'white', 'blue']).spark_center([' * ', 'gray', 'white'], [' Warning ', 'white', 'yellow']).spark_right([' * ', 'gray', 'white'], [' Error ', 'white', 'red']).spark()\n</code></pre>"},{"location":"usage/#you-can-separate-them-by-calling-each-function-in-a-line","title":"You can separate them by calling each function in a line \ud83e\udd24","text":"<pre><code>    from termspark import TermSpark\n\n    termspark = TermSpark()\n    termspark.spark_left([' * ', 'gray', 'white'], [' Info ', 'white', 'blue'])\n    termspark.spark_center([' * ', 'gray', 'white'], [' Warning ', 'white', 'yellow'])\n    termspark.spark_right([' * ', 'gray', 'white'], [' Error ', 'white', 'red'])\n    termspark.spark()\n</code></pre>"},{"location":"usage/#still-too-long-got-you","title":"Still too long \ud83d\ude44 Got you \ud83e\udd29","text":"<pre><code>    from termspark import TermSpark\n\n    termspark = TermSpark()\n    termspark.spark_left([' * ', 'gray', 'white'])\n    termspark.spark_left(' Info ', 'white', 'blue')\n    termspark.spark_center([' * ', 'gray', 'white'])\n    termspark.spark_center([' Warning ', 'white', 'yellow'])\n    termspark.spark_right(' * ', 'gray', 'white')\n    termspark.spark_right([' Error ', 'white', 'red'])\n    termspark.spark()\n</code></pre>"},{"location":"usage/#raw","title":"Raw","text":"<p>You can print raw version which is colors-code-free so you can print clean text into files for example.</p> <pre><code>    from termspark import TermSpark\n\n    raw = TermSpark().print_left('LEFT').print_right('RIGHT').set_separator('.').raw()\n</code></pre>"},{"location":"usage/#force-width","title":"Force Width","text":"<p>You can customize width instead of the default full terminal width.</p> <pre><code>    from termspark import TermSpark\n\n    TermSpark().set_width(40).print_left(\"LEFT\", \"red\").print_right(\"RIGHT\", \"blue\").spark()\n</code></pre>"},{"location":"usage/#set-content-max-width","title":"Set content max width","text":"<p>You can specify max width of content depending on position using <code>max_[position](max_characters)</code>. <pre><code>    from termspark import TermSpark\n\n    termspark = TermSpark()\n    termspark.spark_left([\"LEFT\", \"red\"])\n    termspark.spark_right([\"RIGHT\", \"blue\"])\n    termspark.max_left(2)\n    termspark.max_right(3)\n    termspark.spark()\n</code></pre> This should show only \"LE\" on the left, and \"RIG\" on the right.</p> <p>[!WARNING] <code>max_[position]()</code> is only supported by sparkers.</p>"},{"location":"usage/#full-width","title":"Full width","text":"<p>You can enable full width by using <code>full_width()</code>.</p> <pre><code>    from termspark import TermSpark\n\n    termspark = TermSpark()\n    termspark.spark_center(['Thanks for using Termspark!', 'white', 'green'])\n    termspark.full_width()\n    termspark.spark()\n</code></pre> <p>[!WARNING] <code>full_width()</code> can only be used with one position.</p>"},{"location":"usage/#separator","title":"Separator","text":"<p>You can add color and highlight to separator too using <code>set_separator(content, color, highlight)</code>. <pre><code>termspark = TermSpark()\ntermspark.spark_left([' Author ', 'green'])\ntermspark.spark_right([' Faissal Wahabali ', 'green'])\ntermspark.set_separator('.', 'green')\ntermspark.spark()\n</code></pre> </p>"},{"location":"usage/#line_1","title":"Line","text":"<p>You can add highlight a line by using <code>line(highlight=highlight)</code>. <pre><code>termspark = TermSpark()\ntermspark.line(highlight='green')\ntermspark.spark()\n</code></pre> </p>"},{"location":"usage/#style","title":"Style","text":"<p>You can style your text by passing it to <code>print() style parameter</code> or to <code>spark([]) fourth list element</code>.</p> <p>Supported styles: - bold - dim - italic - overline - underline - double underline - strike through - blink - reverse - hidden</p> <p>[!NOTE] You can mix styles by separating them by commas.</p> <p><pre><code>termspark = TermSpark()\ntermspark.print_center(' Termspark ', 'green', style='underline, overline, italic')\ntermspark.full_width()\ntermspark.spark()\n</code></pre> </p>"},{"location":"usage/#hyperlinks","title":"Hyperlinks","text":"<p>You can insert hyperlink using Markdown <code>[TEXT](LINK)</code>. <pre><code>termspark = TermSpark()\ntermspark.spark_left([\" Author \", \"green\"])\ntermspark.spark_right([\" [@faissaloux](https://github.com/faissaloux) \", \"green\"])\ntermspark.set_separator(\".\", \"green\")\ntermspark.spark()\n</code></pre> </p>"}]}